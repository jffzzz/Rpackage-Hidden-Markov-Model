// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// EvaluationForward
double EvaluationForward(arma::mat A, arma::mat B, arma::vec P, arma::vec O);
RcppExport SEXP _hmm_EvaluationForward(SEXP ASEXP, SEXP BSEXP, SEXP PSEXP, SEXP OSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type O(OSEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluationForward(A, B, P, O));
    return rcpp_result_gen;
END_RCPP
}
// EvaluationBackward
double EvaluationBackward(arma::mat A, arma::mat B, arma::vec P, arma::vec O);
RcppExport SEXP _hmm_EvaluationBackward(SEXP ASEXP, SEXP BSEXP, SEXP PSEXP, SEXP OSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type O(OSEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluationBackward(A, B, P, O));
    return rcpp_result_gen;
END_RCPP
}
// LearningForward
arma::mat LearningForward(arma::mat A, arma::mat B, arma::vec PI, arma::vec O);
RcppExport SEXP _hmm_LearningForward(SEXP ASEXP, SEXP BSEXP, SEXP PISEXP, SEXP OSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PI(PISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type O(OSEXP);
    rcpp_result_gen = Rcpp::wrap(LearningForward(A, B, PI, O));
    return rcpp_result_gen;
END_RCPP
}
// LearningBackward
arma::mat LearningBackward(arma::mat A, arma::mat B, arma::vec PI, arma::vec O);
RcppExport SEXP _hmm_LearningBackward(SEXP ASEXP, SEXP BSEXP, SEXP PISEXP, SEXP OSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PI(PISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type O(OSEXP);
    rcpp_result_gen = Rcpp::wrap(LearningBackward(A, B, PI, O));
    return rcpp_result_gen;
END_RCPP
}
// LearnBaumWelch_PI
arma::vec LearnBaumWelch_PI(arma::mat A, arma::mat B, arma::vec PI, arma::vec O, double e);
RcppExport SEXP _hmm_LearnBaumWelch_PI(SEXP ASEXP, SEXP BSEXP, SEXP PISEXP, SEXP OSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PI(PISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type O(OSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(LearnBaumWelch_PI(A, B, PI, O, e));
    return rcpp_result_gen;
END_RCPP
}
// LearnBaumWelch_A
arma::mat LearnBaumWelch_A(arma::mat A, arma::mat B, arma::vec PI, arma::vec O, double e);
RcppExport SEXP _hmm_LearnBaumWelch_A(SEXP ASEXP, SEXP BSEXP, SEXP PISEXP, SEXP OSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PI(PISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type O(OSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(LearnBaumWelch_A(A, B, PI, O, e));
    return rcpp_result_gen;
END_RCPP
}
// LearnBaumWelch_B
arma::mat LearnBaumWelch_B(arma::mat A, arma::mat B, arma::vec PI, arma::vec O, double e);
RcppExport SEXP _hmm_LearnBaumWelch_B(SEXP ASEXP, SEXP BSEXP, SEXP PISEXP, SEXP OSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PI(PISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type O(OSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(LearnBaumWelch_B(A, B, PI, O, e));
    return rcpp_result_gen;
END_RCPP
}
// Viterbi_cpp
arma::mat Viterbi_cpp(arma::mat A, arma::mat B, arma::vec PI, arma::vec V, arma::vec Q, arma::vec obs);
RcppExport SEXP _hmm_Viterbi_cpp(SEXP ASEXP, SEXP BSEXP, SEXP PISEXP, SEXP VSEXP, SEXP QSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PI(PISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(Viterbi_cpp(A, B, PI, V, Q, obs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hmm_EvaluationForward", (DL_FUNC) &_hmm_EvaluationForward, 4},
    {"_hmm_EvaluationBackward", (DL_FUNC) &_hmm_EvaluationBackward, 4},
    {"_hmm_LearningForward", (DL_FUNC) &_hmm_LearningForward, 4},
    {"_hmm_LearningBackward", (DL_FUNC) &_hmm_LearningBackward, 4},
    {"_hmm_LearnBaumWelch_PI", (DL_FUNC) &_hmm_LearnBaumWelch_PI, 5},
    {"_hmm_LearnBaumWelch_A", (DL_FUNC) &_hmm_LearnBaumWelch_A, 5},
    {"_hmm_LearnBaumWelch_B", (DL_FUNC) &_hmm_LearnBaumWelch_B, 5},
    {"_hmm_Viterbi_cpp", (DL_FUNC) &_hmm_Viterbi_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_hmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
